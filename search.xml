<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>web在线解压编辑</title>
      <link href="/2022/08/01/web-zai-xian-jie-ya-bing-zai-xian-bian-ji/"/>
      <url>/2022/08/01/web-zai-xian-jie-ya-bing-zai-xian-bian-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="web代码编辑"><a href="#web代码编辑" class="headerlink" title="web代码编辑"></a>web代码编辑</h3><p>效果如下：<br><img src="https://img-blog.csdnimg.cn/f7cb00c0913d44a7b887abd0f916ab0b.png" alt="在线编辑"></p><h4 id="1、解压"><a href="#1、解压" class="headerlink" title="1、解压"></a>1、解压</h4><p>在线解压需要用到 <a href="https://stuk.github.io/jszip/documentation/api_jszip.html">jszip</a>，支持将<code>String / Array of bytes / ArrayBuffer / Uint8Array / Buffer / Blob / Promise</code>文件格式的压缩包解压。<br>由于接口返回的是文件流，所以使用<code>jszip-utils</code>包将文件流转为<code>ArrayBuffer</code>格式。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> jszip -S<span class="token function">npm</span> <span class="token function">install</span> jszip-utils -S<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> JSZipUtils <span class="token keyword">from</span> <span class="token string">"jszip-utils"</span><span class="token punctuation">;</span><span class="token keyword">import</span> JSZip <span class="token keyword">from</span> <span class="token string">"jszip"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">zip</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token function">loadZip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      JSZipUtils<span class="token punctuation">.</span><span class="token function">getBinaryContent</span><span class="token punctuation">(</span><span class="token string">"压缩文件地址"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> err<span class="token punctuation">;</span> <span class="token comment">// or handle the error</span>   <span class="token punctuation">}</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>zip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSZip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//解压</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>zip<span class="token punctuation">.</span><span class="token function">loadAsync</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印出来是这样的：</p><p><img src="https://img-blog.csdnimg.cn/fdac0d1ad5b943e2808036c6e50dcd02.png" alt="jszip"></p><h4 id="2、生成目录"><a href="#2、生成目录" class="headerlink" title="2、生成目录"></a>2、生成目录</h4><p>目录用的是<code>element-ui</code>的树形控件，加载方式懒加载，这样就不用递归生成所有目录。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tree</span>  <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tree<span class="token punctuation">"</span></span>  <span class="token attr-name">lazy</span>  <span class="token attr-name">highlight-current</span>  <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileMenu<span class="token punctuation">"</span></span>  <span class="token attr-name">:props</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultProps<span class="token punctuation">"</span></span>  <span class="token attr-name">:load</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loadNode<span class="token punctuation">"</span></span>  <span class="token attr-name">@node-click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleNodeClick<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 文件夹图标 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>custom-tree-node<span class="token punctuation">"</span></span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{ node, data }<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>!data.leaf<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-folder-opened<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ node.label }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tree</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">fileMenu</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token literal-property property">defaultProps</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">"children"</span><span class="token punctuation">,</span>        <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"label"</span><span class="token punctuation">,</span>        <span class="token literal-property property">isLeaf</span><span class="token operator">:</span> <span class="token string">"leaf"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token function">getMenuList</span><span class="token punctuation">(</span><span class="token parameter">zip</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">const</span> menu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 循环当前文件夹目录</span>zip<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">relativePath<span class="token punctuation">,</span> file</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>   <span class="token keyword">const</span> dir <span class="token operator">=</span> relativePath<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 文件</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     menu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       <span class="token literal-property property">label</span><span class="token operator">:</span> dir<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token literal-property property">leaf</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>       <span class="token literal-property property">path</span><span class="token operator">:</span> file<span class="token punctuation">.</span>name<span class="token punctuation">,</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment">// 文件夹</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> file<span class="token punctuation">.</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>     menu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       <span class="token literal-property property">label</span><span class="token operator">:</span> dir<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token literal-property property">leaf</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>       <span class="token literal-property property">path</span><span class="token operator">:</span> file<span class="token punctuation">.</span>name<span class="token punctuation">,</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> menu<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 加载子目录</span><span class="token function">loadNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>level <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">// 把点击的文件夹路径传入</span>  <span class="token keyword">const</span> child <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMenuList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>zip<span class="token punctuation">.</span><span class="token function">folder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、代码编辑"><a href="#3、代码编辑" class="headerlink" title="3、代码编辑"></a>3、代码编辑</h4><p>在线代码编辑需要用到 <a href="https://microsoft.github.io/monaco-editor/api/index.html">monaco-editor</a>，建议下载0.30.0版本。如果需要代码高亮、快捷键、语法提示等功能可以安装<code>monaco-editor-webpack-plugin</code>插件帮忙导入。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> monaco-editor@0.30.0 -S<span class="token function">npm</span> <span class="token function">install</span> monaco-editor-webpack-plugin@6.0.0 -S<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>monaco<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> monaco <span class="token keyword">from</span> <span class="token string">"monaco-editor"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">monacoInstance</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>monacoInstance <span class="token operator">=</span> monaco<span class="token punctuation">.</span>editor<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"monaco"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">//请选择文件进行编辑</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token literal-property property">language</span><span class="token operator">:</span> <span class="token string">"js"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 编辑监听</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>monacoInstance<span class="token punctuation">.</span><span class="token function">onDidChangeModelContent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token comment">// 在树节点加上点击事件</span><span class="token function">handleNodeClick</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>leaf<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>currentPath <span class="token operator">=</span> data<span class="token punctuation">.</span>path<span class="token punctuation">;</span>  <span class="token comment">// 将点击的文件内容显示在编译框内</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>zip       <span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>path<span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>monacoInstance<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 保存编辑</span> <span class="token function">saveValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> newValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>monacoInstance<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>zip<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentPath<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 打包</span>    <span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>zip<span class="token punctuation">.</span><span class="token function">generateAsync</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">"blob"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 保存或上传操作</span>    <span class="token comment">// saveAs(content, "hello.zip");</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> monaco-editor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3添加动态路由</title>
      <link href="/2022/04/04/vue3-dong-tai-lu-you-addroute/"/>
      <url>/2022/04/04/vue3-dong-tai-lu-you-addroute/</url>
      
        <content type="html"><![CDATA[<h3 id="路由方法"><a href="#路由方法" class="headerlink" title="路由方法"></a>路由方法</h3><p>Vue2中，有两种方法实现路由权限动态渲染：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">addRoutes</span><span class="token punctuation">(</span>parentOrRoute<span class="token punctuation">,</span> route<span class="token punctuation">)</span>    <span class="token comment">//添加单个</span>router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span>                  <span class="token comment">//添加多个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但在Vue3中，只保留了 <code>addRoute()</code> 方法。</p><p>首先，假设路由如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> menu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'system-manage'</span><span class="token punctuation">,</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'system-manage'</span><span class="token punctuation">,</span>  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/system'</span><span class="token punctuation">,</span>  <span class="token literal-property property">meta</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'系统管理'</span><span class="token punctuation">,</span>    <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">'setting'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">compoent</span><span class="token operator">:</span> <span class="token string">'layout'</span><span class="token punctuation">,</span>  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'role'</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'role'</span><span class="token punctuation">,</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/system/role'</span><span class="token punctuation">,</span>      <span class="token literal-property property">meta</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'角色管理'</span><span class="token punctuation">,</span>        <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">'user-filled'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token literal-property property">compoent</span><span class="token operator">:</span> <span class="token string">'view/system/role'</span><span class="token punctuation">,</span>      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 递归替换引入component</span><span class="token keyword">function</span> <span class="token function">dynamicRouter</span><span class="token punctuation">(</span><span class="token parameter">routers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  routers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">itemRouter<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token operator">...</span>itemRouter<span class="token punctuation">,</span>      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>itemRouter<span class="token punctuation">.</span>component<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">// 是否存在子集</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>itemRouter<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> itemRouter<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">dynamicRouter</span><span class="token punctuation">(</span>itemRouter<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> list<span class="token punctuation">}</span><span class="token comment">// 防止首次或者刷新界面路由失效</span><span class="token keyword">let</span> registerRouteFresh <span class="token operator">=</span> <span class="token boolean">true</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>registerRouteFresh<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// addRoute允许带children添加，所以循环第一层即可</span>    <span class="token function">dynamicRouter</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">itemRouter</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span>itemRouter<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>to<span class="token punctuation">,</span> <span class="token literal-property property">replace</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    registerRouteFresh <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="scss错误处理"><a href="#scss错误处理" class="headerlink" title="scss错误处理"></a>scss错误处理</h3><p>使用这种拼接的方式会导致全局scss多次注入错误，而且需要后台返回文件路径。<br><img src="https://img-blog.csdnimg.cn/e8e689917c57445db8a85f4a80808ad8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAZm1s5rW35qOg,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="scss报错"></p><p>所以改用以下方式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在本地建一个路由表</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/system/role'</span><span class="token punctuation">,</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'角色管理'</span><span class="token punctuation">,</span>  <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/system/role'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">dynamicRouter</span><span class="token punctuation">(</span><span class="token parameter">routers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  routers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">itemRouter<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 从本地找组件</span>    <span class="token keyword">const</span> authRoute <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token operator">=&gt;</span>i<span class="token punctuation">.</span>path<span class="token operator">==</span>itemRouter<span class="token punctuation">.</span>path<span class="token punctuation">)</span>    list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token operator">...</span>itemRouter<span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span> authRoute<span class="token operator">?.</span>component <span class="token operator">||</span> Layout <span class="token comment">//没找到则用默认框架组件</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">// 是否存在子集</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>itemRouter<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> itemRouter<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">dynamicRouter</span><span class="token punctuation">(</span>itemRouter<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> list<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果出现 <code>Error: Invalid route component</code> ,看下路径是否正确，还有 <code>addRoute</code> 里传的是否是对象，一开始传了数组导致找了半天（扶额</p><p><img src="https://img-blog.csdnimg.cn/548a70ca5d0e4b1db2d15622a4ee2689.png#pic_center" alt="Invalid route"><br>以上。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 动态路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-二分查找</title>
      <link href="/2021/08/09/suan-fa-er-fen-cha-zhao/"/>
      <url>/2021/08/09/suan-fa-er-fen-cha-zhao/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><p>二分查找是基于<code>有序数组</code>的查找。首先有左中右三个指针，当中间指针指向的数<code>大于</code>目标值，将右指针移到中间指针前一位，如果<code>小于</code>则移动左指针到中间指针后一位，通过不断缩小范围，直到找到目标值。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">finIndex</span><span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>right <span class="token operator">=</span> list<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>  mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">+</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二分查找还能解决一类抽象问题，如查找数组<code>[0,0,0,0,0,1,1,1,1,]</code>中第一个1的位置，或者最后一个0的位置。代码相较原来变化不大，只是左右指针的移动是否移到中间指针前后的差异而已。</p><h2 id="二、题目"><a href="#二、题目" class="headerlink" title="二、题目"></a>二、题目</h2><h3 id="1-x-的平方根"><a href="#1-x-的平方根" class="headerlink" title="1.x 的平方根"></a>1.x 的平方根</h3><p><img src="https://img-blog.csdnimg.cn/913c2d69eb954bd2bf19e4b453acdecc.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ5MzQzNjg2,size_16,color_FFFFFF,t_70" alt="x 的平方根"></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>此题就是寻找最后一个0的抽象问题。即前面小于等于x的记为0，大于x的记为1，最后一个0就是本题的答案。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number} x * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">mySqrt</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>right <span class="token operator">=</span> x<span class="token punctuation">,</span>mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 避免计算超界 mid  = head + ((tail - head) / 2.0);</span>         <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">&gt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//防止死循环</span>    mid<span class="token operator">*</span>mid <span class="token operator">&gt;</span> x <span class="token operator">?</span> right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> left <span class="token operator">=</span> mid        mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span>left<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>right<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//少于3项用for循环遍历</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">*</span>i<span class="token operator">&gt;</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>            mid <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            mid <span class="token operator">=</span> i        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> mid<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于原题可以看做函数<code>f(x)=√x</code>，我们可以调整固定<code>100</code>次来找到目标数。因为每二分调整一次，就会把待查找的区间缩少一半，二分调整100次，待调整区间就是2的100次方分之一，此时左右指针相差仅有2的100次方分之一，然后取左指针整数部分即可。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">mySqrt</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>right <span class="token operator">=</span> x<span class="token punctuation">,</span>mid<span class="token punctuation">;</span>    right <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 避免计算超界</span>        mid  <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">*</span> mid <span class="token operator">&lt;=</span> x<span class="token punctuation">)</span> left <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> right <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-归并排序</title>
      <link href="/2021/07/13/suan-fa-gui-bing-pai-xu/"/>
      <url>/2021/07/13/suan-fa-gui-bing-pai-xu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>归并排序 = 递归 + 合并</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>通过递归将大数组拆分成每一项，然后对两项进行有序合并。归并排序中重点为<strong>合并</strong>，即将两个有序数组合并为一个有序数组。<br>我们可以设置两个<strong>指针</strong>，一个指向左边数组的第一项，一个指向右边数组第一项，比较两个指针对应的数，将小的放入临时数组中，然后对应小的指针右移，不断循环直到两个指针都移到对应数组的末尾后。<br>最后把临时数组覆盖到原数组对应位置就可以了。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">mergeSort</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;=</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将左边数组变有序</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>    <span class="token comment">//将右边数组变有序</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>    <span class="token comment">//将左右两个有序数组合并</span>    <span class="token keyword">let</span> p1 <span class="token operator">=</span> left<span class="token punctuation">,</span> p2 <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> saveArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> mid <span class="token operator">||</span> p2 <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p2 <span class="token operator">&gt;</span> right<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            saveArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">)</span>            p1<span class="token operator">++</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            saveArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span>            p2<span class="token operator">++</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//将合并后数组覆盖原数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> saveArr<span class="token punctuation">[</span>i <span class="token operator">-</span> left<span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>归并排序作用并不局限于排序，其重要的思想就是<strong>将一个大问题拆分为若干个小问题，通过解决小问题与横跨小问题之间的问题来解决大问题</strong>。下面通过实际问题来了解其强大之处。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="1-逆序对问题"><a href="#1-逆序对问题" class="headerlink" title="1.逆序对问题"></a>1.逆序对问题</h3><p><img src="https://img-blog.csdnimg.cn/20210712173246170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ5MzQzNjg2,size_16,color_FFFFFF,t_70" alt="逆序对问题"></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>此题重点在于<strong>合并过程中记录逆序对的数量</strong>。<br>首先对数组进行降序排列，在合并两个数组过程中，<strong>每当</strong>左边数组的值放入临时数组时，由于两边的数组都是降序，所以当前值比右边数组指针下标到数组末尾的所有值都大。即<code>右边数组末尾下标 - 右指针下标 = 逆序对个数</code></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number[]} nums * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">mergeSort</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">//记录左右数组的逆序对个数</span>        Lnum <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">,</span>        Rnum <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span>        num <span class="token operator">=</span> Lnum <span class="token operator">+</span> Rnum<span class="token punctuation">;</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> l<span class="token punctuation">,</span> right <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> sortArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> mid <span class="token operator">||</span> right <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">&gt;</span> r<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sortArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 左边的值加入临时数组，记录逆序对数量</span>            num <span class="token operator">+=</span> r <span class="token operator">-</span> right <span class="token operator">+</span> <span class="token number">1</span>            left<span class="token operator">++</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            sortArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            right<span class="token operator">++</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sortArr<span class="token punctuation">[</span>i <span class="token operator">-</span> l<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> num<span class="token punctuation">}</span><span class="token keyword">var</span> <span class="token function-variable function">reversePairs</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-排序链表"><a href="#2-排序链表" class="headerlink" title="2.排序链表"></a>2.排序链表</h3><p><img src="https://img-blog.csdnimg.cn/2021071310560646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ5MzQzNjg2,size_16,color_FFFFFF,t_70" alt="排序链表"></p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>这题就是普通的递归排序，只不过从数组变成链表。<br>个人感觉在拆分上难一点，一开始我是通过遍历一遍获得链表长度，然后再让指针跑到一半的位置，需要遍历两次。后来看到别人的快慢指针感觉不错就抄了：)<br>而合并过程没什么好说的，就是指针的左右横跳。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*** function ListNode(val, next) {*    this.val = (val === undefined ? 0 : val)*    this.next = (next === undefined ? null : next)* }**/</span><span class="token keyword">var</span> <span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">leftList<span class="token punctuation">,</span> rightList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token comment">// 将两个有序链表合并</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>leftList <span class="token operator">&amp;&amp;</span> rightList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leftList<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> rightList<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> leftList            leftList <span class="token operator">=</span> leftList<span class="token punctuation">.</span>next        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> rightList            rightList <span class="token operator">=</span> rightList<span class="token punctuation">.</span>next        <span class="token punctuation">}</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>        <span class="token comment">// 将剩下的一条链表加到结果链表的末尾</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token punctuation">.</span>next <span class="token operator">=</span> leftList    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rightList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token punctuation">.</span>next <span class="token operator">=</span> rightList    <span class="token punctuation">}</span>        <span class="token comment">//返回合并后链表</span>    <span class="token keyword">return</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">}</span><span class="token comment">/*** @param {ListNode} head* @return {ListNode}*/</span><span class="token keyword">var</span> <span class="token function-variable function">sortList</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment">// 快慢指针，快指针走到末尾，慢指针走到一半</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast<span class="token punctuation">)</span> fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 拆成两条有序链表</span>    <span class="token keyword">let</span> rightList <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    slow<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">let</span> leftList <span class="token operator">=</span> head    <span class="token keyword">let</span> l <span class="token operator">=</span> <span class="token function">sortList</span><span class="token punctuation">(</span>leftList<span class="token punctuation">)</span>    <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token function">sortList</span><span class="token punctuation">(</span>rightList<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-排列两棵二叉搜索树中的所有元素"><a href="#3-排列两棵二叉搜索树中的所有元素" class="headerlink" title="3.排列两棵二叉搜索树中的所有元素"></a>3.排列两棵二叉搜索树中的所有元素</h3><p><img src="https://img-blog.csdnimg.cn/20210713152151789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ5MzQzNjg2,size_16,color_FFFFFF,t_70" alt="两棵二叉搜索树中的所有元素"></p><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>由于二叉搜索树的特性：<code>左节点比根节点小，右节点比根节点大</code>。<br>所以对二叉树进行中序遍历就会得到一个有序数组，然后对两个有序数组合并即可。</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment">// 中序遍历</span><span class="token keyword">var</span> <span class="token function-variable function">inorder</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> leftArr <span class="token operator">=</span> <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span>        rightArr <span class="token operator">=</span> <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>leftArr<span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">,</span> <span class="token operator">...</span>rightArr<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment">/** * @param {TreeNode} root1 * @param {TreeNode} root2 * @return {number[]} */</span><span class="token keyword">var</span> <span class="token function-variable function">getAllElements</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root1<span class="token punctuation">,</span> root2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 获得两个有序数组</span>    <span class="token keyword">let</span> leftList <span class="token operator">=</span> <span class="token function">inorder</span><span class="token punctuation">(</span>root1<span class="token punctuation">)</span><span class="token punctuation">,</span>        rightList <span class="token operator">=</span> <span class="token function">inorder</span><span class="token punctuation">(</span>root2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 合并两个有序数组</span>    <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> p2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;</span> leftList<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">&lt;</span> rightList<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leftList<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rightList<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>leftList<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">)</span>            p1<span class="token operator">++</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rightList<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span>            p2<span class="token operator">++</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;</span> leftList<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>leftList<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">&lt;</span> rightList<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>rightList<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> temp<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-共同祖先"><a href="#4-共同祖先" class="headerlink" title="4.共同祖先"></a>4.共同祖先</h3><p><img src="https://img-blog.csdnimg.cn/20210714111141110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ5MzQzNjg2,size_16,color_FFFFFF,t_70" alt="共同祖先"></p><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>一共三种情况：</p><ol><li>p， q有一个是root；</li><li>p， q分别在root左节点，右节点上；</li><li>p， q都在root的同一侧；</li></ol><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @param {TreeNode} p * @param {TreeNode} q * @return {TreeNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">lowestCommonAncestor</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token comment">//第一种情况，返回当前节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> p <span class="token operator">||</span> root <span class="token operator">==</span> q<span class="token punctuation">)</span><span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token comment">//寻找左右子树是否存在p，q</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span>    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span>    <span class="token comment">//第二种情况，返回当前节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">)</span><span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token comment">//第三种情况，存在哪一侧就返回那一侧寻找到的结果</span>    <span class="token keyword">return</span> left <span class="token operator">?</span> left <span class="token operator">:</span> right<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-最深叶子节点的和"><a href="#5-最深叶子节点的和" class="headerlink" title="5.最深叶子节点的和"></a>5.最深叶子节点的和</h3><p><img src="https://img-blog.csdnimg.cn/20210714155944401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ5MzQzNjg2,size_16,color_FFFFFF,t_70" alt="最深叶子节点的和"></p><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p>记录两个值：</p><ol><li>已经查找到的节点最大深度</li><li>现在记录到的最大深度节点的和值</li></ol><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">numSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> deep<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">// 深度增加，覆盖旧值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>deep <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">.</span>val        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> deep    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>deep <span class="token operator">==</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 深度相同，累加</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> root<span class="token punctuation">.</span>val    <span class="token punctuation">}</span>    <span class="token comment">// 递归左右子节点</span>    <span class="token function">numSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> deep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>    <span class="token function">numSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> deep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">/** * @param {TreeNode} root * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">deepestLeavesSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 第一项记录深度，第二项记录和值</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>    <span class="token function">numSum</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>    <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-子数组和排序后的区间和"><a href="#6-子数组和排序后的区间和" class="headerlink" title="6.子数组和排序后的区间和"></a>6.子数组和排序后的区间和</h3><p><img src="https://img-blog.csdnimg.cn/20210714172108688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ5MzQzNjg2,size_16,color_FFFFFF,t_70" alt="子数组和排序后的区间和"></p><h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><p>先遍历整个数组，把数组里面的所有子数组和都计算出来，然后进行归并排序得到有序数组，最后对10^9 + 7 取<br>模后返回即可。</p><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">rangeSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> n<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment">// 计算所有子数组和</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">+=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 归并排序</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// 计算区间和</span>    <span class="token keyword">let</span> Sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Sum <span class="token operator">+=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        Sum <span class="token operator">%=</span> <span class="token number">1000000007</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Sum<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-区间和的个数"><a href="#7-区间和的个数" class="headerlink" title="7. 区间和的个数"></a>7. 区间和的个数</h3><p><img src="https://img-blog.csdnimg.cn/20210715160331954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ5MzQzNjg2,size_16,color_FFFFFF,t_70" alt=" 区间和的个数"></p><h4 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h4><p>求区间和值都可以转换为前缀和问题。<br>前缀和概念：<br><img src="https://img-blog.csdnimg.cn/20210715160719612.png" alt="前缀和"><br>利用这一特性，原数组下标 i 到下标 j 之间的和值为前缀和数组下标 j 的值减去下标 i 的值。<br>即 <code>arr[i] + ... + arr[j] = prefix[j] - prefix[i]</code></p><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number[]} nums * @param {number} lower * @param {number} upper * @return {number} */</span><span class="token comment">// 前缀和</span><span class="token keyword">var</span> <span class="token function-variable function">prefix</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> temp<span class="token punctuation">}</span><span class="token keyword">var</span> <span class="token function-variable function">countRangeSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> lower<span class="token punctuation">,</span> upper</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> preList <span class="token operator">=</span> <span class="token function">prefix</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>preList<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>preList<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> lower<span class="token punctuation">,</span> upper<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">mergeSort</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> lower<span class="token punctuation">,</span> upper</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;=</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 记录左右两边数组符合区间和的个数</span>    <span class="token keyword">let</span> leftNum <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> lower<span class="token punctuation">,</span> upper<span class="token punctuation">)</span>    <span class="token keyword">let</span> rightNum <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> lower<span class="token punctuation">,</span> upper<span class="token punctuation">)</span>    <span class="token keyword">let</span> num <span class="token operator">=</span> leftNum <span class="token operator">+</span> rightNum    <span class="token comment">// 统计右边减左边符合的下标对数量</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token keyword">let</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> r <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> lower<span class="token punctuation">)</span> l<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> upper<span class="token punctuation">)</span> r<span class="token operator">++</span><span class="token punctuation">;</span>       num <span class="token operator">+=</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>       i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 将左右两个有序数组合并</span>    <span class="token keyword">let</span> p1 <span class="token operator">=</span> left<span class="token punctuation">,</span> p2 <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> saveArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> mid <span class="token operator">||</span> p2 <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p2 <span class="token operator">&gt;</span> right<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            saveArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">)</span>            p1<span class="token operator">++</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            saveArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span>            p2<span class="token operator">++</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 将合并后数组覆盖原数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> saveArr<span class="token punctuation">[</span>i <span class="token operator">-</span> left<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> num<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-计算右侧小于当前元素的个数"><a href="#8-计算右侧小于当前元素的个数" class="headerlink" title="8. 计算右侧小于当前元素的个数"></a>8. 计算右侧小于当前元素的个数</h3><p><img src="https://img-blog.csdnimg.cn/20210720102758894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ5MzQzNjg2,size_16,color_FFFFFF,t_70" alt="计算右侧小于当前元素的个数"></p><h4 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h4><p>首先排序规则为降序排序，这样当左数组元素加入结果数组时，右数组剩余元素数量就是当前元素大于右数组元素的数量。<br><strong>注意：由于排序会改变原数组元素位置，需要新建一个对象数组记录元素的值与元素的原位置，然后对对象数组排序即可。</strong></p><h4 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number[]} nums * @return {number[]} */</span><span class="token keyword">var</span> <span class="token function-variable function">countSmaller</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 新建对象数组，记录元素原位置</span>    <span class="token keyword">let</span> objList <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> inx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token literal-property property">value</span><span class="token operator">:</span> i<span class="token punctuation">,</span>            <span class="token literal-property property">index</span><span class="token operator">:</span> inx        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> resArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>objList<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> resArr<span class="token punctuation">)</span>    <span class="token keyword">return</span> resArr<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">mergeSort</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> resArr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;=</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> resArr<span class="token punctuation">)</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> resArr<span class="token punctuation">)</span>    <span class="token comment">//每次合并都记录个数</span>    <span class="token keyword">let</span> p1 <span class="token operator">=</span> left<span class="token punctuation">,</span> p2 <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> saveArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            saveArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment">//左数组加入结果数组时记录元素个数</span>            resArr<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> p2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            p1<span class="token operator">++</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            saveArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span>            p2<span class="token operator">++</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        saveArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        saveArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">//将合并后数组覆盖原数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> saveArr<span class="token punctuation">[</span>i <span class="token operator">-</span> left<span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 归并排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp 「小程序」考勤系统的日历组件</title>
      <link href="/2021/03/04/uniapp-xiao-cheng-xu-kao-qin-xi-tong-de-ri-li-zu-jian/"/>
      <url>/2021/03/04/uniapp-xiao-cheng-xu-kao-qin-xi-tong-de-ri-li-zu-jian/</url>
      
        <content type="html"><![CDATA[<p>由于是用uniapp写的，所以在网页上也可以用，先上预览图<br><img src="https://img-blog.csdnimg.cn/img_convert/4d5e029b6e47d2f4322b964e7292b10a.gif" alt="日历.gif"></p><p>主要功能：</p><ul><li>点击选中样式</li><li>滑动跳转月份</li><li>点击非本月日期跳转相应月份</li></ul><h2 id="一、css部分"><a href="#一、css部分" class="headerlink" title="一、css部分"></a>一、css部分</h2><p>css样式原理如下，红色框为用户视图。拖拉的时候改变left数值就可以了。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ece1b1280db4402ef8a2d2296b208b41.png" alt="视图.png"></p><blockquote><p>小tips：<br>当宽度为自适应，不知道具体数值，而需要用宽度计算时，可以用<code>padding-bottom</code>。这样我们就可以一行放下七个圆形了。</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.day-item</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 14%<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有css如下：<br>数字偏上是预留位置给当天的状态显示。</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.module</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 92%<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 15px auto<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span>16px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 30rpx 20rpx<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token selector">.threeMonth</span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 300%<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token selector">.title</span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 35rpx<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">padding-bottom</span><span class="token punctuation">:</span> 30rpx<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token selector">.day</span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span>    <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>        <span class="token selector">.active</span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> #1972F0<span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token selector">.day-item</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 14%<span class="token punctuation">;</span>    <span class="token selector">text</span><span class="token punctuation">{</span>      <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>      <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>      <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% <span class="token operator">-</span> 1em<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% <span class="token operator">+</span> 1em<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、template部分"><a href="#二、template部分" class="headerlink" title="二、template部分"></a>二、template部分</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>day<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>day-item<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) in [<span class="token punctuation">'</span>日<span class="token punctuation">'</span>,<span class="token punctuation">'</span>一<span class="token punctuation">'</span>,<span class="token punctuation">'</span>二<span class="token punctuation">'</span>,<span class="token punctuation">'</span>三<span class="token punctuation">'</span>,<span class="token punctuation">'</span>四<span class="token punctuation">'</span>,<span class="token punctuation">'</span>五<span class="token punctuation">'</span>,<span class="token punctuation">'</span>六<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      {{item}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 日期 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>threeMonth<span class="token punctuation">"</span></span>    <span class="token attr-name">@touchstart</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>touchstart<span class="token punctuation">'</span></span><span class="token attr-name">@touchmove</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>touchmove<span class="token punctuation">'</span></span> <span class="token attr-name">@touchend</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>touchend<span class="token punctuation">'</span></span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>left:calc(-100% + <span class="token punctuation">'</span>+dayLeft+<span class="token punctuation">'</span>px)<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 遍历集合三个月的列表 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>day<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) in monthList<span class="token punctuation">"</span></span><span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 遍历每个月的天数 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>day-item<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item2,index2) in item<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index2<span class="token punctuation">"</span></span><span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dayClick(index2)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 不是本月的天数颜色为灰色 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span>               <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item2.className<span class="token punctuation">"</span></span>               <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item2.fromMonth==<span class="token punctuation">'</span>nowMonth<span class="token punctuation">'</span>?<span class="token punctuation">'</span><span class="token punctuation">'</span>:<span class="token punctuation">'</span>color:#c8c9cc;<span class="token punctuation">'</span><span class="token punctuation">"</span></span>            <span class="token punctuation">&gt;</span></span>              {{item2.day}}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、js部分"><a href="#三、js部分" class="headerlink" title="三、js部分"></a>三、js部分</h2><p>功能与解释都在注释中写明。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">nowYear</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//获取年份</span><span class="token literal-property property">nowMonth</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">//获取月份</span><span class="token literal-property property">monthList</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token literal-property property">dayLeft</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token literal-property property">startLeft</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/*调用初始化当前考勤*/</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getThreeMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">// 日期模块点击</span><span class="token function">touchstart</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// 记录初始点击位置</span><span class="token keyword">this</span><span class="token punctuation">.</span>startLeft <span class="token operator">=</span> e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pageX<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 日期模块拖动</span><span class="token function">touchmove</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>dayLeft <span class="token operator">=</span> e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pageX <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startLeft<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 日期模块松手</span><span class="token function">touchend</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// 根据移动距离判断跳转上一月还是下一月</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dayLeft<span class="token operator">&gt;</span><span class="token number">100</span> <span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">syy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dayLeft<span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">100</span> <span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">xyy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>dayLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">/*获取上一月*/</span><span class="token function">syy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nowMonth<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>nowYear<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nowYear<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>nowMonth<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getThreeMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">this</span><span class="token punctuation">.</span>nowMonth<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nowMonth<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getThreeMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">/*获取下一月*/</span><span class="token function">xyy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nowMonth<span class="token operator">==</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>nowYear<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nowYear<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>nowMonth<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getThreeMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">this</span><span class="token punctuation">.</span>nowMonth<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nowMonth<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getThreeMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">/*闰年 时间判断*/</span><span class="token function">isLeap</span><span class="token punctuation">(</span><span class="token parameter">year</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//获取某月日期</span><span class="token function">getCalendar</span><span class="token punctuation">(</span><span class="token parameter">Year<span class="token punctuation">,</span>Month</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//每个月的天数</span><span class="token keyword">var</span> days_per_month <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isLeap</span><span class="token punctuation">(</span>Year<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> dateList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//获取本月的一号是星期几 0星期天</span><span class="token keyword">var</span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Year <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> Month <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token string">'01'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//上月月份</span><span class="token keyword">var</span> lastMonth <span class="token operator">=</span> Month<span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span> <span class="token number">12</span><span class="token operator">:</span> Month<span class="token operator">-</span><span class="token number">1</span><span class="token comment">// 上月天数</span><span class="token keyword">var</span> lastMonthDay <span class="token operator">=</span> days_per_month<span class="token punctuation">[</span>lastMonth <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">// 补上 上月日期</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> day <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>lastMonthDay<span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token punctuation">;</span>          dateList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>              day<span class="token punctuation">,</span>              <span class="token literal-property property">fromMonth</span><span class="token operator">:</span> <span class="token string">'lastMonth'</span><span class="token punctuation">,</span>              <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">''</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//获取上月末尾天数  补齐本月日历显示</span> <span class="token punctuation">}</span> <span class="token comment">// 当月天数</span><span class="token keyword">var</span> nowMonthDay <span class="token operator">=</span> days_per_month<span class="token punctuation">[</span>Month <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">// 添加当月日期</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nowMonthDay<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>dateList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">day</span><span class="token operator">:</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">fromMonth</span><span class="token operator">:</span> <span class="token string">'nowMonth'</span><span class="token punctuation">,</span><span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//获取本月最后一天是星期几 0星期天</span><span class="token keyword">var</span> l <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Year <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> Month <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> nowMonthDay<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// 补上 下月日期</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token operator">-</span>l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dateList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token literal-property property">day</span><span class="token operator">:</span> i<span class="token punctuation">,</span>                <span class="token literal-property property">fromMonth</span><span class="token operator">:</span> <span class="token string">'nextMonth'</span><span class="token punctuation">,</span>              <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">''</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> dateList<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 获取三月日期</span><span class="token function">getThreeMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">let</span> year<span class="token punctuation">,</span>month<span class="token keyword">this</span><span class="token punctuation">.</span>monthList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">// 获取上一月日历</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nowMonth<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>year <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nowYear<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>month <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>year <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nowYearmonth <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nowMonth<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">this</span><span class="token punctuation">.</span>monthList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCalendar</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span>month<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 获取当前月日历</span><span class="token keyword">this</span><span class="token punctuation">.</span>monthList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCalendar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nowYear<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>nowMonth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 获取下一月日历</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nowMonth<span class="token operator">==</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">{</span>year <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nowYear<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>month <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>year <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nowYearmonth <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nowMonth<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">this</span><span class="token punctuation">.</span>monthList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCalendar</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span>month<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//点击某一天</span><span class="token function">dayClick</span><span class="token punctuation">(</span><span class="token parameter">Index</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// 如果 点击本月的日期</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>monthList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Index<span class="token punctuation">]</span><span class="token punctuation">.</span>fromMonth<span class="token operator">==</span><span class="token string">'nowMonth'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>monthList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>inx</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>Index <span class="token operator">==</span> inx<span class="token punctuation">)</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'active'</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">//点击 哪一天</span><span class="token keyword">let</span> day <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>monthList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Index<span class="token punctuation">]</span><span class="token punctuation">.</span>day<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>monthList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Index<span class="token punctuation">]</span><span class="token punctuation">.</span>fromMonth<span class="token operator">==</span><span class="token string">'nextMonth'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// 如果 点击下一月的日期 跳转下一月</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">xyy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>monthList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Index<span class="token punctuation">]</span><span class="token punctuation">.</span>fromMonth<span class="token operator">==</span><span class="token string">'lastMonth'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// 如果 点击上一月的日期 跳转上一月</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">syy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//对应日期 选中状态</span><span class="token keyword">let</span> indx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>monthList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> e<span class="token punctuation">.</span>fromMonth<span class="token operator">==</span><span class="token string">'nowMonth'</span><span class="token operator">&amp;&amp;</span>e<span class="token punctuation">.</span>day<span class="token operator">==</span>day<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>monthList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>indx<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'active'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue传值的几种方法</title>
      <link href="/2020/08/12/vue-chuan-zhi/"/>
      <url>/2020/08/12/vue-chuan-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、父子组件间传值"><a href="#一、父子组件间传值" class="headerlink" title="一、父子组件间传值"></a>一、父子组件间传值</h2><h3 id="父组件向子组件传值（props）"><a href="#父组件向子组件传值（props）" class="headerlink" title="父组件向子组件传值（props）"></a>父组件向子组件传值（props）</h3><p>父组件代码如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 子组件 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Child</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span> Child <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Father Message'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件代码如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 渲染出父组件传过来的值 --&gt;</span>    message: {{value}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> String  <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子组件给父组件传值（emit事件）"><a href="#子组件给父组件传值（emit事件）" class="headerlink" title="子组件给父组件传值（emit事件）"></a>子组件给父组件传值（emit事件）</h3><p>子组件代码如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClick<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    abc  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">// 点击发布消息</span>    <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 自定义事件input</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token string">'Child Message'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>父组件代码如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 用自定义事件input调用onMessage方法 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onMessage<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Child</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span> Child <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">onMessage</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 接收的子组件传来的消息</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、Storage缓存"><a href="#二、Storage缓存" class="headerlink" title="二、Storage缓存"></a>二、Storage缓存</h2><p><code>sessionStorage</code>和<code>localStorage</code>都是HTML5新增的方法，使用它可以在客户端本地建立一个数据库，原本必须保存在服务器端数据库中的内容现在可以直接保存在客户端本地了，这大大减轻了服务器端的负担，同时也加快了访问数据的速度。</p><h3 id="local-Storage"><a href="#local-Storage" class="headerlink" title="local Storage"></a>local Storage</h3><p>用法如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取指定key本地存储的值</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment">// 将value存储到key字段</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token comment">// 删除指定key本地存储的值</span>localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment">// 清除所有本地存储的值</span>localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：</p><p>相较于cookie的小容量（4K）来说容量较大（5MB）<br>简单易用，功能强大，原生支持<br>可离线浏览与使用 ，减少服务器负载<br>缺点与限制：</p><p>无法跨域，运行在不同域的JavaScript无法调用其他域<code>localStorage</code>的数据<br>只能储存字符串型的数据，无法保存数组和对象，但可以通过<code>join</code>、<code>toString</code>和<code>JSON.stringify</code>等方法先转换成字符串再储存<br>安全性不高，请勿保存敏感信息<br>如果多人开发容易造成key重复导致全局污染</p><h3 id="Session-Storage"><a href="#Session-Storage" class="headerlink" title="Session Storage"></a>Session Storage</h3><p>用法特点与local Storage相似：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取指定key本地存储的值</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment">// 将value存储到key字段</span>sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token comment">// 删除指定key本地存储的值</span>sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment">// 清除所有本地存储的值</span>sessionStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Session Storage</code>与<code>local Storage</code>的区别在于保存的周期,<code>Session Storage</code>为临时保存，当用户关闭浏览器时自动删除数据，<code>local Storage</code>则是永久保存，除非主动删除。</p><h2 id="三、组件之间传值（eventBus）"><a href="#三、组件之间传值（eventBus）" class="headerlink" title="三、组件之间传值（eventBus）"></a>三、组件之间传值（eventBus）</h2><p>此方法适用于小项目，页面较少的场景。<br><code>EventBus</code>又称事件总线,在Vue中可以使用<code>EventBus</code>来作为沟通桥梁的概念,就像是所有事件共用相同的事件中心,可以向该中心发送事件或接收事件,所有组件都可以上下平行的通知其他组件。</p><p>用法如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 首先在全局中通过new Vue()生成一个vue实例来实现事件总线:</span><span class="token keyword">var</span> EventBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在需要传递参数的组件中，用$emit发送需要传递的值，键名可以自己定义（可以为对象）</span>eventBus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'eventBusName'</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token comment">//在需要接受参数的组件中，用$on接受该值（或对象），val即为传递过来的值</span>eventBus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'eventBusName'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>　            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 最后记住要在beforeDestroy()中关闭这个eventBus</span>eventBus<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">'eventBusName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、Vuex"><a href="#四、Vuex" class="headerlink" title="四、Vuex"></a>四、Vuex</h2><p>此方法适用于大型项目，页面较多的场景。<br>因为对于多层嵌套的组件进行传值将会非常繁琐，并且对于兄弟组件间的状态传递也无能为力，所以Vuex就帮我们解决这种困难。</p><p>详细用法：<a href="https://vuex.vuejs.org/zh/">Vuex官方文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo的基本使用</title>
      <link href="/2020/05/29/hexo-ji-ben-shi-yong/"/>
      <url>/2020/05/29/hexo-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h3><p>Hexo是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。即把用户的markdown文件，按照指定的主题解析成静态网页。</p><h3 id="2-安装hexo"><a href="#2-安装hexo" class="headerlink" title="2.安装hexo"></a>2.安装hexo</h3><p>安装使用hexo之前需要先安装Node.js和Git，当已经安装了Node.js和npm(npm是node.js的包管理工具)，可以通过以下命令安装hexo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以通过以下命令查看主机中是否安装了node.js和npm</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> --version    <span class="token comment">#检查是否安装了node.js</span><span class="token function">npm</span> --version     <span class="token comment">#检查是否安装了npm</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果出现了版本号说明已经安装了node.js和npm。</p><h3 id="3-建站"><a href="#3-建站" class="headerlink" title="3. 建站"></a>3. 建站</h3><p>安装完Hexo之后，执行下列命令，Hexo将会在指定目录中新建所需要的文件，指定的目录即为Hexo的工作站</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init <span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span><span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>新建完成之后，指定目录中的情况如下</p><pre class="line-numbers language-none"><code class="language-none">.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-config-yml"><a href="#3-1-config-yml" class="headerlink" title="3.1 _config.yml"></a>3.1 _config.yml</h4><p>网站的配置信息，您可以在此配置大部分的参数。<a href="https://hexo.io/zh-cn/docs/configuration">配置参数讲解</a></p><h4 id="3-2-scaffolds"><a href="#3-2-scaffolds" class="headerlink" title="3.2 scaffolds"></a>3.2 scaffolds</h4><p>模版文件夹。新建文章时，Hexo 会根据 <code>scaffold</code> 中的模板文件来建立新的文件。Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果修改 <code>scaffold/post.md</code> 中的 <code>Front-matter</code> 内容，那么每次新建一篇文章时都会包含这个修改。也就是说，通过hexo命令每新建一个文章，都会包含指定模板文件中的内容。<br><a href="https://hexo.io/zh-cn/docs/templates">模板讲解</a></p><h4 id="3-3-source"><a href="#3-3-source" class="headerlink" title="3.3 source"></a>3.3 source</h4><p>资源文件夹是存放用户资源的地方，如markdown文章。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p><h4 id="3-4-themes"><a href="#3-4-themes" class="headerlink" title="3.4 themes"></a>3.4 themes</h4><p>主题文件夹。Hexo 会根据主题来解析source目录中的markdown文件生成静态页面。将下载的主题文件放到该文件夹下，并在配置文件下修改应用主题即可更换主题。<a href="https://hexo.io/zh-cn/docs/themes">主题讲解</a></p><h3 id="4-写作"><a href="#4-写作" class="headerlink" title="4. 写作"></a>4. 写作</h3><p>可以执行下列命令来创建一篇新文章。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以在命令中指定文章的布局（layout），不指定默认为 post，也可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。创建的新文章会自动加上指定布局对应的模板文件中的内容。</p><h4 id="4-1-布局（Layout）"><a href="#4-1-布局（Layout）" class="headerlink" title="4.1 布局（Layout）"></a>4.1 布局（Layout）</h4><p>Hexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径，而自定义的其他布局和 post 相同，都将储存到 <code>source/_posts</code> 文件夹。<br>布局路径 <code>postsource/_postspagesourcedraftsource/_drafts</code><br>如果你不想你的文章被处理，你可以将 <code>Front-Matter</code> 中的 <code>layout</code> 设为 <code>false</code> 。</p><h4 id="4-2-模版（Scaffold）"><a href="#4-2-模版（Scaffold）" class="headerlink" title="4.2 模版（Scaffold）"></a>4.2 模版（Scaffold）</h4><p>在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new photo <span class="token string">"My Gallery"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 <code>photo.md</code>，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p><p>变量描述：</p><ul><li><code>layout</code> 布局</li><li><code>title</code> 标题</li><li><code>date</code> 文件建立日期</li></ul><h4 id="4-3-Front-matter"><a href="#4-3-Front-matter" class="headerlink" title="4.3 Front-matter"></a>4.3 Front-matter</h4><p>Front-matter是文件最上方以 — 分隔的区域，用于指定个别文件的变量，举例来说：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">--</span><span class="token operator">-</span><span class="token literal-property property">title</span><span class="token operator">:</span> Hello World<span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token number">2020</span><span class="token operator">/</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">13</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">46</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">--</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：一般Front-matter使用的yaml语法，yaml语法需要注意空格，如<code>title: Hello World</code>冒号需要有一个空格，当然除YAML 外，你也可以使用 JSON 来编写 Front-matter。</p><p>以下是<code>Matery主题</code>预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th align="left">配置选项</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">title</td><td align="left"><code>Markdown</code> 的文件标题</td><td align="left">文章标题，强烈建议填写此选项</td></tr><tr><td align="left">date</td><td align="left">文件创建时的日期时间</td><td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="left">author</td><td align="left">根 <code>_config.yml</code> 中的 <code>author</code></td><td align="left">文章作者</td></tr><tr><td align="left">img</td><td align="left"><code>featureImages</code> 中的某个值</td><td align="left">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td align="left">top</td><td align="left"><code>true</code></td><td align="left">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="left">cover</td><td align="left"><code>false</code></td><td align="left"><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="left">coverImg</td><td align="left">无</td><td align="left"><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="left">password</td><td align="left">无</td><td align="left">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td align="left">toc</td><td align="left"><code>true</code></td><td align="left">是否开启 <code>TOC</code>，可以针对某篇文章单独关闭 <code>TOC</code> 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td align="left">mathjax</td><td align="left"><code>false</code></td><td align="left">是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td align="left">summary</td><td align="left">无</td><td align="left">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="left">categories</td><td align="left">无</td><td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="left">tags</td><td align="left">无</td><td align="left">文章标签，一篇文章可以多个标签</td></tr></tbody></table><h5 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h5><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性而标签没有顺序和层次。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">categories</span><span class="token operator">:</span>    <span class="token operator">-</span> Diary<span class="token literal-property property">tags</span><span class="token operator">:</span>    <span class="token operator">-</span> <span class="token constant">PS3</span>    <span class="token operator">-</span> Games<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-文章摘要"><a href="#4-4-文章摘要" class="headerlink" title="4.4 文章摘要"></a>4.4 文章摘要</h4><p>设置文章摘要，我们只需在想显示为摘要的内容之后添 <span id="more"></span>即可。像下面这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">--</span><span class="token operator">-</span><span class="token literal-property property">title</span><span class="token operator">:</span> hello hexo markdown<span class="token literal-property property">tags</span><span class="token operator">:</span>    <span class="token operator">-</span> hexo    <span class="token operator">-</span> markdown<span class="token operator">--</span><span class="token operator">-</span>文章摘要<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> more <span class="token operator">--</span><span class="token operator">&gt;</span>正文内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，<code>&lt;!-- more --&gt;</code> 之前、文档配置参数之后中的内容便会被渲染为站点中的文章摘要。</p><p>注意！文章摘要在文章详情页是正文中最前面的内容。</p><h4 id="4-5-资源引用"><a href="#4-5-资源引用" class="headerlink" title="4.5 资源引用"></a>4.5 资源引用</h4><p>写个博客，有时候会想添加个图片或者其他形式的资源等等。有以下两种方式进行解决：</p><ul><li>使用绝对路径引用资源，在 Web 世界中就是资源的 URL</li><li>使用相对路径引用资源<br>对于使用相对路径引用资源的，我们可以使用 Hexo 提供的资源文件夹功能。</li></ul><p>使用文本编辑器打开站点根目录下的 <code>_config.yml</code> 文件，将 post_asset_folder 值设置为 true。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">post_asset_folder</span><span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改之后会开启 Hexo 的文章资源文件管理功能。Hexo 将会在我们每一次通过 <code>hexo new &lt;title&gt;</code> 命令创建新文章时自动创建一个同名文件夹，于是我们便可以将文章所引用的相关资源放到这个同名文件夹下，然后通过相对路径引用。例如，你把一个 example.jpg 图片放在了这个同名文件夹中，使用相对路径的常规 markdown 语法 <code>![](./example.jpg)</code>即可访问 。</p><h3 id="5-网站发布"><a href="#5-网站发布" class="headerlink" title="5. 网站发布"></a>5. 网站发布</h3><p>首先执行下列命令生成相应的静态网页，生成的静态网页以及相关资源都会在public目录下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo generate       <span class="token comment">#可简写成 hexo g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-1-用hexo-server"><a href="#5-1-用hexo-server" class="headerlink" title="5.1 用hexo-server"></a>5.1 用hexo-server</h4><p>hexo-server模块的主要命令如下，输入以下命令以启动服务器，您的网站会在本地启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo server     <span class="token comment">#可简写成 hexo s</span>hexo server -p <span class="token number">5000</span>     <span class="token comment">#指定端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>由于是本地启动，比较适用于调试。</p><h4 id="5-2-部署到Git上"><a href="#5-2-部署到Git上" class="headerlink" title="5.2 部署到Git上"></a>5.2 部署到Git上</h4><p>在项目根目录下找到配置文件 <code>_congif.yml</code>，找到 deploy 字段并填写完整</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/deployment.html</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> &lt;你的仓库地址<span class="token punctuation">&gt;</span> <span class="token comment">#git@github.com:Feng-ML/Feng-ML.github.io.git</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master  <span class="token key atrule">ignore_hidden</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且我们需要额外的一个工具来帮助我们推到仓库上</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后执行以下命令即可自动部署到github上</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5-3-部署到Apache或者Nginx上"><a href="#5-3-部署到Apache或者Nginx上" class="headerlink" title="5.3 部署到Apache或者Nginx上"></a>5.3 部署到Apache或者Nginx上</h4><p>通过hexo g命令生成的都是静态网页，可以把生成的public目录中的文件，全都拷贝到网站根目录，然后启动apache或者nginx服务。</p><h3 id="6-参考链接"><a href="#6-参考链接" class="headerlink" title="6.参考链接"></a>6.参考链接</h3><p><a href="https://hexo.io/zh-cn/docs/">Hexo</a><br>主题：<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">Matery</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
